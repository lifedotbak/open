# 项目相关配置###############################
server:
  name: open
  http:
    port: 8080
  servlet:
    context-path: /${server.name}

platform:
  # 名称
  name: ${server.name}
  # 文件路径 示例（ Windows配置D:/platform/uploadPath，Linux配置 /home/platform/uploadPath）
  profile: D:/${server.name}/
  # 获取ip地址开关
  addressEnabled: true
  # 验证码开关
  captchaEnabled: open
  # 验证码类型 math 数字计算 char 字符验证
  captchaType: math

###############################文件上传配置,配置默认文件保存位置###############################
upload:
  location: /${server.name}

# Spring配置
spring:
  #  aop:
  #    proxy-target-class: true
  #    auto: true
  application:
    name: ${server.name}
  #  boot :
  #    admin :
  #      client :
  #        name : ${server.name}
  #        url : http://127.0.0.1:8080/open

  # flowable ui关闭liquibase
  liquibase:
    enabled: false
  jackson:
    time-zone: Asia/Shanghai
    #字段为null时不返回该字段
    default-property-inclusion: non_null
    date-format: yyyy-MM-dd HH:mm:ss
    deserialization:
      fail-on-unknown-properties: false
  #    date-format: yyyy-MM-dd HH:mm:ss
  #  profiles:
  #    active: druid
  # 文件上传
  servlet:
    multipart:
      # 单个文件大小
      max-file-size: 100MB
      # 设置总上传的文件大小
      max-request-size: 1000MB
  redis:
    #     放开redisson配置，其他都为空，redission-starter（RedissonAutoConfiguration）会选择配置SingleServerConfig，redis连接地址采用的是spring.data.redis下配置
    redisson:
  #      file: classpath:redisson.yml
  cache:
    #指定缓存类型
    type: redis
    #指定存活时间（ms）
    redis.time-to-live: 86400000
    #是否缓存空值，可以防止缓存穿透
    redis.cache-null-values: true

  mvc:
    # 设置接口超时时间
    async:
      request-timeout: 20000
    view:
      prefix: /
      suffix: .html
    pathmatch:
      matching-strategy: ant_path_matcher
    # [可选]上传文件大小限制
    servlet:
      multipart:
        max-file-size: 10MB
        max-request-size: 100MB

  #数据源
  datasource:
    druid:
      username: root
      password: '123456'
      url: jdbc:mysql://127.0.0.1:3306/open?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai
      driver-class-name: com.mysql.cj.jdbc.Driver
      minIdle: 3
      maxWait: 10000
      validationQuery: SELECT 'x'
      timeBetweenEvictionRunsMillis: 60000
      minEvictableIdleTimeMillis: 300000
  data:
    redis:
      host: 127.0.0.1
      # 如果不需要密码 password注释掉，jedis，redisson在连接redis时候，不注释password配置，会报错
      #      password:
      port: 6379
      timeout: 6000
      lettuce:
        pool:
          max-active: 8
          max-wait: -1
          max-idle: 8
          min-idle: 0
        shutdown-timeout: 100

  web:
    resources:
      static-locations: classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/,file:${upload.location}

  flyway:
    # 启用或禁用 flyway
    enabled: true
    # flyway 的 clean 命令会删除指定 schema 下的所有 table, 杀伤力太大了, 应该禁掉.
    clean-disabled: true
    # 设定 SQL 脚本的目录,多个路径使用逗号分隔, 比如取值为 classpath:db/migration,filesystem:/sql-migrations
    locations: classpath:db/migration
    # 开发环境最好开启 outOfOrder, 生产环境关闭 outOfOrder .
    out-of-order: true
    # 如果没有 flyway_schema_history 这个 metadata 表， 在执行 flyway migrate 命令之前, 必须先执行 flyway baseline 命令
    # 设置为 true 后 flyway 将在需要 baseline 的时候, 自动执行一次 baseline。
    baseline-on-migrate: true
    # 指定 baseline 的版本号,默认值为 1, 低于该版本号的 SQL 文件, migrate 时会被忽略
    baseline-version: 1
    # 字符编码 默认 UTF-8
    encoding: UTF-8
    # 执行迁移时是否自动调用验证   当你的 版本不符合逻辑 比如 你先执行了 DML 而没有 对应的DDL 会抛出异常
    validate-on-migrate: true

  # jdk21打开虚拟线程
  #  threads:
  #    virtual:
  #      enabled: true
  # sping task配置
  task:
    execution:
      pool:
        max-size: 16
        queue-capacity: 100
        keep-alive: "10s"
    scheduling:
      thread-name-prefix: "scheduling-"
      pool:
        size: 5

#=======================打开mybatis-plus,SQL执行日志输出==========================
mybatis-plus:
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl

#======================阿里云配置================================
aliyun:
  push:
    enabled: true
    accessKeyId: push-accessKeyId
    accessKeySecret: push-accessKeySecret
    signName: push-accessKeySecret
    androidKey: push-accessKeySecret
    iosKey: push-accessKeySecret
  sms:
    enabled: true
    accessKeyId: sms-accessKeySecret
    accessKeySecret: sms-accessKeySecret
    signName: sms-accessKeySecret
  oss:
    enabled: true
    accessKeyId: oss-accessKeySecret
    accessKeySecret: oss-accessKeySecret
    bucketName: oss-bucketName
    endPoint: oss-endPoint
    outImgUrl: uuuu
  ram:
    enabled: true
    accessKeyId: ram-accessKeySecret
    accessKeySecret: ram-accessKeySecret
    roleArn: ram-accessKeySecret
    roleSessionName: ram-accessKeySecret
    durationSeconds: 3600
  tts:
    enabled: true
    accessKeyId: tts-accessKeySecret
    accessKeySecret: tts-accessKeySecret

#======================微信配置================================
weixin:
  enabled: false
  miniprogram:
    appId:
    appSecret:
  pay:
    appId:
    mchId:
    certificateSerialNo:
    apiclientKeyPath:
    notifyUrl:
    apiV3key:
    refundNotifyUrl:

#========================网易云信================================
netease:
  enabled: false
  im:
    appKey:
    appSecret:

# ======================Mqtt配置===lighting-x7etg8 =============================
# =======  input--->采集器接收命令的队列，服务器从input获取命令操作结果
# =======  out--->采集器返回命令结果的队列，服务器象out队列发送命令
mqtt:
  enabled: false
  services: tcp://192.168.200.66:1883
  user:
  password:
  topic:
    input: mqttpub
    out: mqttsub

#========================xxl-server config================================
xxl:
  job:
    # 执行器开关
    enabled: false
    # 调度中心地址：如调度中心集群部署存在多个地址则用逗号分隔。
    # admin-addresses: http://localhost:9900
    # 调度中心应用名 通过服务名连接调度中心(启用admin-appname会导致admin-addresses不生效)
    admin-appname: xxl-job-admin
    # 执行器通讯TOKEN：非空时启用
    access-token: xxl-job
    # 执行器配置
    executor:
      # 执行器AppName：执行器心跳注册分组依据；为空则关闭自动注册
      appname: ${spring.application.name}-executor
      # 执行器端口号 执行器从19901开始往后写
      port: 9902
      # 执行器注册：默认IP:PORT
      address:
      # 执行器IP：默认自动获取IP
      ip:
      # 执行器运行日志文件存储磁盘路径
      logpath: ./logs/${spring.application.name}/xxl-job
      # 执行器日志文件保存天数：大于3生效
      logretentiondays: 30
xxl-server:
  enabled: false
  url: http://192.168.200.65:9900
  user-name:
  password:
  job-group: 3
  author:
  job-desc:
  glue-type: BEAN
  executor-route-strategy: FIRST
  misfire-strategy: DO_NOTHING
  executor-block-strategy: SERIAL_EXECUTION

#========================zlmediakit配置config================================
#========================https://mvnrepository.com/artifact/io.github.lunasaw/zlm-spring-boot-starter配置config================================
zlm:
  enable: true
  balance: round_robin
  hook-enable: true
  nodes:
    - server-id: zlm
      host: "http://192.168.200.81:8080"
      secret: 035c73f7-bb6b-4889-a715-d9eb2d1925cc
      enabled: true
      hook-enabled: true

#========================minio配置config================================
minio:
  enabled: false
  endpoint: http://127.0.0.1:29000
  bucket: ${spring.application.name}
  accesskey: uV5ZA5ghEizVFSuo
  secretkey: djG0WzOTNAXtEyYTw4gQgVcMCOCfo9MG

############## Sa-Token 配置 (文档: https://sa-token.cc) ##############
sa-token:
  # token 名称（同时也是 cookie 名称）
  token-name: satoken
  # token 有效期（单位：秒） 默认30天，-1 代表永久有效
  timeout: 3600
  # token 最低活跃频率（单位：秒），如果 token 超过此时间没有访问系统就会被冻结，默认-1 代表不限制，永不冻结
  active-timeout: 1800
  # 是否允许同一账号多地同时登录 （为 true 时允许一起登录, 为 false 时新登录挤掉旧登录）
  is-concurrent: true
  # 在多人登录同一账号时，是否共用一个 token （为 true 时所有登录共用一个 token, 为 false 时每次登录新建一个 token）
  is-share: true
  # token 风格（默认可取值：uuid、simple-uuid、random-32、random-64、random-128、tik）
  token-style: random-128
  # 是否输出操作日志
  is-log: true
  # sa-token-temp-jwt 模块的秘钥 （定义的密钥）
  jwt-secret-key: app-spyker-sa-token-temp-jwt

################ nacos配置 ##############
#nacos:
#  # 实现配置的动态变更
#  config:
#    server-addr: 127.0.0.1:8848
#    # 配置 ID，采用类似 package.class（如com.taobao.tc.refund.log.level）的命名规则保证全局唯一性，class部分建议是配置的业务含义。
#    # 全部字符小写。只允许英文字符和 4 种特殊字符（”.”、”:”、”-”、”_”），不超过 256 字节。
#    data-id: com.spyker.open
#    # 配置分组，建议填写产品名:模块名（Nacos）保证唯一性，只允许英文字符和4种特殊字符（”.”、”:”、”-”、”_”），不超过128字节。
#    group: dev
#    auto-refresh: true
#    # endpoint--->springboot endpoint暂时配置为空，但是不能少了这个字段，负责启动报错
#    endpoint:
#    # 开启预加载，@NacosValue 使用方可取得值
#    bootstrap:
#      enable: true
#  # 服务的注册与发现
#  discovery:
#    auto-register: true
#    server-addr: 127.0.0.1:8848
#    register:
#      group-name: dev

ko-time:
  pointcut: execution(public * com.spyker.*.controller.*.*(..))
  log-enable: false
  saver: redis
  data-prefix: kotime

################ 全局事务配置 ##############
transactional:
  pointcut: execution(public * com.spyker.*.service.*.*(..))
  requiredMethods:
    - save*
    - remove*
    - update*
    - batch*
    - clear*
    - add*
    - append*
    - modify*
    - edit*
    - insert*
    - delete*
    - do*
    - create*
    - import*
    - upload*
  readOnlyMethods:
    - get*
    - find*
    - list*
    - query*
    - select*
    - load*
    - count*
    - page*
    - search*
    - valid*
